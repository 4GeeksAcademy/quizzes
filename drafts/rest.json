{
	"info": {
		"slug": "rest",
		"name": "Test your RESTful API Knowledge",
		"main": "Beware, a lot of HTTP, Requests, Responses and REST questions are about start pumping!",
		"results": "Learn More: Check out the lesson about CSS!.",
		"badges": [
		]
	},
	"questions": [
		{
		"q": "What is the main serialization format for RESTful API's?",
		"a": [{
				"option": "Javascript",
				"correct": false
			},
			{
				"option": "Programming Languages",
				"correct": false
			},
			{
				"option": "JSON",
				"correct": true
			},
			{
				"option": "HTTP",
				"correct": false
			}
		]
	}, {
		"q": "Why do you think JSON became so popular?",
		"a": [{
				"option": "Because is the fastest format out there",
				"correct": false
			},
			{
				"option": "Because is easy to read for developers",
				"correct": true
			},
			{
				"option": "Because it looks like english",
				"correct": false
			}
		]
	}, {
		"q": "If you are developing an API and you want to provide a service for adding clients into the database, what would be the ideal RESTful request type?",
		"a": [{
				"option": "GET",
				"correct": false
			},
			{
				"option": "POST",
				"correct": false
			},
			{
				"option": "PUT",
				"correct": true
			},
			{
				"option": "DELETE",
				"correct": false
			}
		]
	}, {
		"q": "If you are developing an API and you want to provide a service for adding clients into the database, what would be the ideal request URL?",
		"a": [{
				"option": "PUT: /create/client",
				"correct": false
			},
			{
				"option": "PUT: /create_client",
				"correct": false
			},
			{
				"option": "PUT: /client",
				"correct": true
			},
			{
				"option": "PUT: /create-client/client/",
				"correct": false
			}
		]
	}, {
		"q": "What would be the best way to implement a login feature using a REST API?",
		"a": [{
				"option": "Create a POST: /login request that receives user:password and open a session in the API when is called, from that moment all requests are considered part of the same login session",
				"correct": false
			},
			{
				"option": "Create a POST: /login requests that receives user:password and return a hash that lasts for X amount of time, that hash will have to be appended on every single request to be considered as part of the same session",
				"correct": true
			},
			{
				"option": "Any approach is equally valid",
				"correct": false
			}
		]
	}, {
		"q": "Why do we need to serialize stuff?",
		"a": [{
				"option": "Because objects are to be to be sent as objects",
				"correct": false
			},
			{
				"option": "Because the only wat to send information is to transform it into text",
				"correct": true
			},
			{
				"option": "Because is a best practice in any RESTful API",
				"correct": false
			},
			{
				"option": "Because we are told to do so, and we should follow without questioning",
				"correct": false
			}
		]
	}, {
		"q": "When building an API, when is the best moment to serialize?",
		"a": [{
				"option": "Right before sending back our response",
				"correct": true
			},
			{
				"option": "Right after receiving the request",
				"correct": false
			},
			{
				"option": "Whenever we are about to save the information into the database",
				"correct": false
			},
			{
				"option": "There is no right time, it depends on every developer",
				"correct": false
			}
		]
	}, {
		"q": "Is everthing text?",
		"a": [{
				"option": "Yes! Everything is! Even objects and variable contents",
				"correct": false
			},
			{
				"option": "Only the data that is traveling through HTTP (like JSONs) or stored is text",
				"correct": true
			},
			{
				"option": "Only images and files are text, the rest is binary",
				"correct": false
			},
			{
				"option": "I'm not sure, but instructors are always saying that everything is text so I will just repeat that here",
				"correct": false
			}
		]
	}, {
		"q": "If everything that travels over the HTTP protocol is text, how do we check what format it contains to be able to interpret it?",
		"a": [{
				"option": "We should check the content-type",
				"correct": true
			},
			{
				"option": "We should check the extension in the URL",
				"correct": false
			},
			{
				"option": "We should open the file in our computer and read the content to be able to understand the format",
				"correct": false
			}
		]
	}, {
		"q": "Based on the REST best practices, what is this API request for? POST: /author/204/album/3",
		"a": [{
				"option": "To create a new album with the id 3, for the author with the id 204",
				"correct": false
			},
			{
				"option": "To update the album with the id 3 made by the author with the id 204",
				"correct": true
			},
			{
				"option": "To set the user 204 as author of the album 3",
				"correct": false
			},
			{
				"option": "It can be use for any of the above options",
				"correct": false
			}
		]
	}, {
		"q": "What are the reasons to generate an authentication token",
		"a": [{
				"option": "Making the API clients send a hash signature on every request to validate their session",
				"correct": false
			},
			{
				"option": "Forcing all API clients to autenticate on every request with username and password",
				"correct": false
			},
			{
				"option": "Forcing the API clients to login in on the first request and keeping a session open for that client for a certain period of time.",
				"correct": true
			}
		]
	}, {
		"q": "Which response status code indicates an issue with the server?",
		"a": [{
				"option": "2XX",
				"correct": false
			},
			{
				"option": "4XX",
				"correct": false
			},
			{
				"option": "5XX",
				"correct": true
			},
			{
				"option":"1XX",
				"correct":false
			}
		]
	}, {
		"q": "Let's say you are looking to change the mailing address for a user, which http request would be most appropriate?",
		"a": [{
				"option": "PUT",
				"correct": true
			},
			{
				"option": "GET",
				"correct": false
			},
			{
				"option": "POST",
				"correct": false
			}
		]
	}, {
		"q": "Why is GET operation considered a safe operation?",
		"a": [{
				"option": "Can be called many times without risk of data modification.",
				"correct": false
			},
			{
				"option": "Calling it once has the same effect as calling it ten times",
				"correct": false
			},
			{
				"option": "Can call it without risk of corruption of data",
				"correct": false
			},
			{
				"option": "All of the above",
				"correct": true
			}
		]
	}, {
		"q": "In what scenario is POST used for all the writing operations such as updating, deleting, and creating?",
		"a": [{
				"option": "Never, POST is not the appropriate use for those operations",
				"correct": false
			},
			{
				"option": "Because PUT and DELETE are not available in HTML/Forms",
				"correct": true
			},
			{
				"option": "Always, as there are no other options",
				"correct": false
			}
	]
	}
	]
}